package ruokajajuoma.test;
// Generated by ComTest BEGIN
import java.util.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
import ruokajajuoma.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.04 12:11:10 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class RuoatTest {



  // Generated by ComTest BEGIN
  /** testLisaa42 */
  @Test
  public void testLisaa42() {    // Ruoat: 42
    Ruoat ruoat = new Ruoat(); 
    Ruoka savukala = new Ruoka(), lakritsikala = new Ruoka(); 
    assertEquals("From: Ruoat line: 45", 0, ruoat.getLkm()); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 46", 1, ruoat.getLkm()); 
    ruoat.lisaa(lakritsikala); assertEquals("From: Ruoat line: 47", 2, ruoat.getLkm()); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 48", 3, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 49", savukala, ruoat.anna(0)); 
    assertEquals("From: Ruoat line: 50", lakritsikala, ruoat.anna(1)); 
    assertEquals("From: Ruoat line: 51", savukala, ruoat.anna(2)); 
    assertEquals("From: Ruoat line: 52", false, ruoat.anna(1) == savukala); 
    assertEquals("From: Ruoat line: 53", true, ruoat.anna(1) == lakritsikala); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 54", 4, ruoat.getLkm()); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 55", 5, ruoat.getLkm()); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 56", 6, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 57", 6, ruoat.getSize()); 
    ruoat.lisaa(savukala); assertEquals("From: Ruoat line: 58", 7, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 59", 11, ruoat.getSize()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa81 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa81() throws CloneNotSupportedException {    // Ruoat: 81
    Ruoat ruoat = new Ruoat(); 
    Ruoka ruoka1 = new Ruoka(), ruoka2 = new Ruoka(); 
    ruoka1.rekisteroi(); ruoka2.rekisteroi(); 
    assertEquals("From: Ruoat line: 86", 0, ruoat.getLkm()); 
    ruoat.korvaaTaiLisaa(ruoka1); assertEquals("From: Ruoat line: 87", 1, ruoat.getLkm()); 
    ruoat.korvaaTaiLisaa(ruoka2); assertEquals("From: Ruoat line: 88", 2, ruoat.getLkm()); 
    Ruoka ruoka3 = ruoka1.clone(); 
    ruoka3.setNimi("lihapata"); 
    assertEquals("From: Ruoat line: 91", true, ruoat.anna(0) == ruoka1); 
    ruoat.korvaaTaiLisaa(ruoka3); assertEquals("From: Ruoat line: 92", 2, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 93", true, ruoat.anna(0) == ruoka3); 
    assertEquals("From: Ruoat line: 94", false, ruoat.anna(0) == ruoka1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista116 */
  @Test
  public void testPoista116() {    // Ruoat: 116
    Ruoat ruoat = new Ruoat(); 
    Ruoka ruoka1 = new Ruoka(), ruoka2 = new Ruoka(), ruoka3 = new Ruoka(); 
    ruoka1.rekisteroi(); ruoka2.rekisteroi(); ruoka3.rekisteroi(); 
    int id1 = ruoka1.getIdNumero(); 
    ruoat.lisaa(ruoka1); ruoat.lisaa(ruoka2); ruoat.lisaa(ruoka3); 
    assertEquals("From: Ruoat line: 122", 1, ruoat.poista(id1+1)); 
    assertEquals("From: Ruoat line: 123", null, ruoat.annaTietoId(id1+1)); assertEquals("From: Ruoat line: 123", 2, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 124", 1, ruoat.poista(id1)); assertEquals("From: Ruoat line: 124", 1, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 125", 0, ruoat.poista(id1+3)); assertEquals("From: Ruoat line: 125", 1, ruoat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiId145 */
  @Test
  public void testEtsiId145() {    // Ruoat: 145
    Ruoat ruoat = new Ruoat(); 
    Ruoka savukala1 = new Ruoka(), savukala2 = new Ruoka(), savukala3 = new Ruoka(); 
    savukala1.rekisteroi(); savukala2.rekisteroi(); savukala3.rekisteroi(); 
    int id1 = savukala1.getIdNumero(); 
    ruoat.lisaa(savukala1); ruoat.lisaa(savukala2); ruoat.lisaa(savukala3); 
    assertEquals("From: Ruoat line: 152", 1, ruoat.etsiId(id1+1)); 
    assertEquals("From: Ruoat line: 153", 2, ruoat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi167 */
  @Test
  public void testEtsi167() {    // Ruoat: 167
    Ruoat ruoat = new Ruoat(); 
    Ruoka ruoka1 = new Ruoka(); ruoka1.parse("1|Lakritsikala"); 
    Ruoka ruoka2 = new Ruoka(); ruoka2.parse("2|Savukala ja kevatsipulikastike"); 
    Ruoka ruoka3 = new Ruoka(); ruoka3.parse("3|Teriyakilohi"); 
    Ruoka ruoka4 = new Ruoka(); ruoka4.parse("4|Korealainen bulgogi"); 
    Ruoka ruoka5 = new Ruoka(); ruoka5.parse("5|Savukala 760"); 
    ruoat.lisaa(ruoka1); ruoat.lisaa(ruoka2); ruoat.lisaa(ruoka3); ruoat.lisaa(ruoka4); ruoat.lisaa(ruoka5); 
    List<Ruoka> loytyneet; 
    loytyneet = (List<Ruoka>)ruoat.etsi("*s*"); 
    assertEquals("From: Ruoat line: 178", 3, loytyneet.size()); 
    assertEquals("From: Ruoat line: 179", true, loytyneet.get(0) == ruoka1); 
    assertEquals("From: Ruoat line: 180", true, loytyneet.get(1) == ruoka5); 
    assertEquals("From: Ruoat line: 181", true, loytyneet.get(2) == ruoka2); 
    loytyneet = (List<Ruoka>)ruoat.etsi("*savu*"); 
    assertEquals("From: Ruoat line: 184", 2, loytyneet.size()); 
    assertEquals("From: Ruoat line: 185", true, loytyneet.get(0) == ruoka5); 
    assertEquals("From: Ruoat line: 186", true, loytyneet.get(1) == ruoka2); 
    loytyneet = (List<Ruoka>)ruoat.etsi(null); 
    assertEquals("From: Ruoat line: 189", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTietoId228 */
  @Test
  public void testAnnaTietoId228() {    // Ruoat: 228
    Ruoat ruoat = new Ruoat(); 
    Ruoka ruoka1 = new Ruoka(), ruoka2 = new Ruoka(), ruoka3 = new Ruoka(); 
    ruoka1.rekisteroi(); ruoka2.rekisteroi(); ruoka3.rekisteroi(); 
    int id1 = ruoka1.getIdNumero(); 
    ruoat.lisaa(ruoka1); ruoat.lisaa(ruoka2); ruoat.lisaa(ruoka3); 
    assertEquals("From: Ruoat line: 234", true, ruoat.annaTietoId(id1  ) == ruoka1); 
    assertEquals("From: Ruoat line: 235", true, ruoat.annaTietoId(id1+1) == ruoka2); 
    assertEquals("From: Ruoat line: 236", true, ruoat.annaTietoId(id1+2) == ruoka3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLueTiedostosta277 */
  @Test
  public void testLueTiedostosta277() {    // Ruoat: 277
    Ruoat ruoat = new Ruoat(); 
    Ruoka ruoka1 = new Ruoka(), ruoka2 = new Ruoka(); 
    ruoka1.taytaKala(); 
    ruoka2.taytaKala(); 
    String hakemisto = "testiruoat"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    ruoat.lueTiedostosta(tiedNimi); 
    ruoat.lisaa(ruoka1); 
    ruoat.lisaa(ruoka2); 
    ruoat.tallenna(); 
    ruoat = new Ruoat();  // Poistetaan vanhat luomalla uusi
    ruoat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    ruoat.anna(0).compareTo(ruoka1); 
    ruoat.anna(1).compareTo(ruoka2); 
    assertEquals("From: Ruoat line: 298", 2, ruoat.getLkm()); 
    assertEquals("From: Ruoat line: 299", 6, ruoat.getSize()); 
    ruoat.lisaa(ruoka2); 
    ruoat.tallenna(); 
    assertEquals("From: Ruoat line: 303", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Ruoat line: 305", true, fbak.delete()); 
    assertEquals("From: Ruoat line: 306", true, dir.delete()); 
  } // Generated by ComTest END
}