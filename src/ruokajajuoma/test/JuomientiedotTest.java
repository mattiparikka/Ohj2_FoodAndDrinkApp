package ruokajajuoma.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import ruokajajuoma.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.04 12:11:10 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class JuomientiedotTest {



  // Generated by ComTest BEGIN
  /** testLisaa39 */
  @Test
  public void testLisaa39() {    // Juomientiedot: 39
    Juomientiedot juomientiedot  = new Juomientiedot(); 
    Juomatieto punaviini = new Juomatieto(), valkoviini = new Juomatieto(); 
    assertEquals("From: Juomientiedot line: 42", 0, juomientiedot.getLkm()); 
    juomientiedot.lisaa(punaviini); assertEquals("From: Juomientiedot line: 43", 1, juomientiedot.getLkm()); 
    juomientiedot.lisaa(valkoviini); assertEquals("From: Juomientiedot line: 44", 2, juomientiedot.getLkm()); 
    juomientiedot.lisaa(punaviini); assertEquals("From: Juomientiedot line: 45", 3, juomientiedot.getLkm()); 
    assertEquals("From: Juomientiedot line: 46", punaviini, juomientiedot.anna(0)); 
    assertEquals("From: Juomientiedot line: 47", valkoviini, juomientiedot.anna(1)); 
    assertEquals("From: Juomientiedot line: 48", punaviini, juomientiedot.anna(2)); 
    assertEquals("From: Juomientiedot line: 49", false, juomientiedot.anna(1) == punaviini); 
    assertEquals("From: Juomientiedot line: 50", true, juomientiedot.anna(1) == valkoviini); 
    juomientiedot.lisaa(punaviini); assertEquals("From: Juomientiedot line: 51", 4, juomientiedot.getLkm()); 
    juomientiedot.lisaa(punaviini); assertEquals("From: Juomientiedot line: 52", 5, juomientiedot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa63 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa63() throws CloneNotSupportedException {    // Juomientiedot: 63
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juoma1 = new Juomatieto(), juoma2 = new Juomatieto(); 
    juoma1.rekisteroi(); juoma2.rekisteroi(); 
    assertEquals("From: Juomientiedot line: 68", 0, juomientiedot.getLkm()); 
    juomientiedot.korvaaTaiLisaa(juoma1); assertEquals("From: Juomientiedot line: 69", 1, juomientiedot.getLkm()); 
    juomientiedot.korvaaTaiLisaa(juoma2); assertEquals("From: Juomientiedot line: 70", 2, juomientiedot.getLkm()); 
    Juomatieto juoma3 = juoma1.clone(); 
    juoma3.setNimi("punkku"); 
    assertEquals("From: Juomientiedot line: 73", true, juomientiedot.anna(0) == juoma1); 
    juomientiedot.korvaaTaiLisaa(juoma3); assertEquals("From: Juomientiedot line: 74", 2, juomientiedot.getLkm()); 
    assertEquals("From: Juomientiedot line: 75", true, juomientiedot.anna(0) == juoma3); 
    assertEquals("From: Juomientiedot line: 76", false, juomientiedot.anna(0) == juoma1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista111 */
  @Test
  public void testPoista111() {    // Juomientiedot: 111
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juoma21 = new Juomatieto(); juoma21.taytaViini(); 
    Juomatieto juoma11 = new Juomatieto(); juoma11.taytaViini(); 
    Juomatieto juoma22 = new Juomatieto(); juoma22.taytaViini(); 
    Juomatieto juoma12 = new Juomatieto(); juoma12.taytaViini(); 
    Juomatieto juoma23 = new Juomatieto(); juoma23.taytaViini(); 
    juomientiedot.lisaa(juoma21); 
    juomientiedot.lisaa(juoma11); 
    juomientiedot.lisaa(juoma22); 
    juomientiedot.lisaa(juoma12); 
    assertEquals("From: Juomientiedot line: 122", false, juomientiedot.poista(juoma23)); 
    assertEquals("From: Juomientiedot line: 123", 4, juomientiedot.getLkm()); 
    assertEquals("From: Juomientiedot line: 124", true, juomientiedot.poista(juoma11)); 
    assertEquals("From: Juomientiedot line: 125", 3, juomientiedot.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLueTiedostosta178 */
  @Test
  public void testLueTiedostosta178() {    // Juomientiedot: 178
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juomatieto1 = new Juomatieto(), juomatieto2 = new Juomatieto(); 
    juomatieto1.taytaViini(); 
    juomatieto2.taytaViini(); 
    String hakemisto = "testijuomat"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    juomientiedot.lueTiedostosta(tiedNimi); 
    juomientiedot.lisaa(juomatieto1); 
    juomientiedot.lisaa(juomatieto2); 
    juomientiedot.tallenna(); 
    juomientiedot = new Juomientiedot();  // Poistetaan vanhat luomalla uusi
    juomientiedot.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    juomientiedot.anna(0).compareTo(juomatieto1); 
    juomientiedot.anna(1).compareTo(juomatieto2); 
    assertEquals("From: Juomientiedot line: 199", 2, juomientiedot.getLkm()); 
    juomientiedot.lisaa(juomatieto2); 
    juomientiedot.tallenna(); 
    assertEquals("From: Juomientiedot line: 203", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Juomientiedot line: 205", true, fbak.delete()); 
    assertEquals("From: Juomientiedot line: 206", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTietoId295 */
  @Test
  public void testAnnaTietoId295() {    // Juomientiedot: 295
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juomatieto1 = new Juomatieto(), juomatieto2 = new Juomatieto(), juomatieto3 = new Juomatieto(); 
    juomatieto1.rekisteroi(); juomatieto2.rekisteroi(); juomatieto3.rekisteroi(); 
    int id1 = juomatieto1.getIdNumero(); 
    juomientiedot.lisaa(juomatieto1); juomientiedot.lisaa(juomatieto2); juomientiedot.lisaa(juomatieto3); 
    assertEquals("From: Juomientiedot line: 301", true, juomientiedot.annaTietoId(id1  ) == juomatieto1); 
    assertEquals("From: Juomientiedot line: 302", true, juomientiedot.annaTietoId(id1+1) == juomatieto2); 
    assertEquals("From: Juomientiedot line: 303", true, juomientiedot.annaTietoId(id1+2) == juomatieto3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi333 */
  @Test
  public void testEtsi333() {    // Juomientiedot: 333
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juomatieto1 = new Juomatieto(); juomatieto1.parse("1|Kaiken Malbec Arg|1|9.0|Alko"); 
    Juomatieto juomatieto2 = new Juomatieto(); juomatieto2.parse("2|Don David Malbec Arg|1|11.0|Alko"); 
    Juomatieto juomatieto3 = new Juomatieto(); juomatieto3.parse("3|Tsingtao olut Kiina|2|1.0|CM"); 
    Juomatieto juomatieto4 = new Juomatieto(); juomatieto4.parse("6|Punaviini|1|22.0|Alko"); 
    Juomatieto juomatieto5 = new Juomatieto(); juomatieto5.parse("7|Valkoviini|1|23.0|Aalko"); 
    juomientiedot.lisaa(juomatieto1); juomientiedot.lisaa(juomatieto2); juomientiedot.lisaa(juomatieto3); juomientiedot.lisaa(juomatieto4); juomientiedot.lisaa(juomatieto5); 
    List<Juomatieto> loytyneet; 
    loytyneet = (List<Juomatieto>)juomientiedot.etsi("*c*"); 
    assertEquals("From: Juomientiedot line: 344", 2, loytyneet.size()); 
    assertEquals("From: Juomientiedot line: 345", true, loytyneet.get(0) == juomatieto2); 
    assertEquals("From: Juomientiedot line: 346", true, loytyneet.get(1) == juomatieto1); 
    loytyneet = (List<Juomatieto>)juomientiedot.etsi("*viini*"); 
    assertEquals("From: Juomientiedot line: 349", 2, loytyneet.size()); 
    assertEquals("From: Juomientiedot line: 350", true, loytyneet.get(0) == juomatieto4); 
    assertEquals("From: Juomientiedot line: 351", true, loytyneet.get(1) == juomatieto5); 
    loytyneet = (List<Juomatieto>)juomientiedot.etsi(null); 
    assertEquals("From: Juomientiedot line: 354", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiIdt373 */
  @Test
  public void testEtsiIdt373() {    // Juomientiedot: 373
    Juomientiedot juomientiedot = new Juomientiedot(); 
    Juomatieto juomatieto1 = new Juomatieto(); juomatieto1.parse("1|Kaiken Malbec Arg|1|9.0|Alko"); 
    Juomatieto juomatieto2 = new Juomatieto(); juomatieto2.parse("2|Don David Malbec Arg|1|11.0|Alko"); 
    Juomatieto juomatieto3 = new Juomatieto(); juomatieto3.parse("3|Tsingtao olut Kiina|2|1.0|CM"); 
    Juomatieto juomatieto4 = new Juomatieto(); juomatieto4.parse("6|Punaviini|1|22.0|Alko"); 
    Juomatieto juomatieto5 = new Juomatieto(); juomatieto5.parse("7|Valkoviini|1|23.0|Aalko"); 
    juomientiedot.lisaa(juomatieto1); juomientiedot.lisaa(juomatieto2); juomientiedot.lisaa(juomatieto3); juomientiedot.lisaa(juomatieto4); juomientiedot.lisaa(juomatieto5); 
    List<Integer> loytyneet; 
    loytyneet = (List<Integer>)juomientiedot.etsiIdt("*c*"); 
    assertEquals("From: Juomientiedot line: 384", 2, loytyneet.size()); 
    assertEquals("From: Juomientiedot line: 385", true, loytyneet.get(0) == 1); 
    assertEquals("From: Juomientiedot line: 386", true, loytyneet.get(1) == 2); 
    loytyneet = (List<Integer>)juomientiedot.etsiIdt("*viini*"); 
    assertEquals("From: Juomientiedot line: 389", 2, loytyneet.size()); 
    assertEquals("From: Juomientiedot line: 390", true, loytyneet.get(0) == 6); 
    assertEquals("From: Juomientiedot line: 391", true, loytyneet.get(1) == 7); 
    loytyneet = (List<Integer>)juomientiedot.etsiIdt(null); 
    assertEquals("From: Juomientiedot line: 394", 5, loytyneet.size()); 
  } // Generated by ComTest END
}